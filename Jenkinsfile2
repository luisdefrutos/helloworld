pipeline {
    agent none

    stages {
        stage('Inicio') {
             agent any
            steps {
                echo 'Reto 2 - Inicio del pipeline distribuido'
            }
        }

        stage('Servicios en paralelo') {
            parallel {
                stage('Flask') {
                    agent { label 'flask-agent' }
                    steps {
                        echo 'Lanzando servidor Flask'
                        bat 'start /B python app/api.py'
                        stash includes: 'app/**', name: 'flask-code'
                    }
                }

                stage('WireMock') {
                    agent { label 'wiremock-agent' }
                    steps {
                        echo 'Lanzando WireMock'
                        bat 'start /B java -jar wiremock/wiremock-standalone-4.0.0-beta.2.jar --port 8081'
                        stash includes: 'wiremock/mappings/**', name: 'wiremock-mappings'
                    }
                }
            }
        }

        stage('Pruebas') {
            agent { label 'test-agent' }
            steps {
                unstash 'flask-code'
                unstash 'wiremock-mappings'
                echo 'Ejecutando tests unitarios'
                bat 'pytest test/unit --maxfail=1 --disable-warnings -q'
                echo 'Ejecutando tests de servicio'
                bat 'pytest test/rest --maxfail=1 --disable-warnings -q'
            }
        }

        stage('Fin') {
             agent any
            steps {
                echo 'Reto 2 finalizado correctamente.'
            }
        }
    }

    post {
        always {
            echo 'Finalizando procesos si siguen en ejecuci√≥n...'
            bat 'taskkill /F /IM python.exe || exit 0'
            bat 'taskkill /F /IM java.exe || exit 0'
        }
    }
}

