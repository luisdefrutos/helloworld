pipeline {
    agent none
// Comentario de prueba para reejecutar pipeline del Reto 2
    stages {
        stage('Inicio') {
            agent { label 'master' }
            steps {
                echo 'Reto 2 - Inicio del pipeline distribuido'
            }
        }

        stage('Ejecución distribuida') {
            parallel {
                stage('Arrancar Flask') {
                    agent { label 'flask-agent' }
                    steps {
                        echo 'Simulando ejecución de Flask en puerto 5000'
                        bat 'echo Flask levantado'
                    }
                }

                stage('Arrancar WireMock') {
                    agent { label 'wiremock-agent' }
                    steps {
                        echo 'Simulando ejecución de WireMock en puerto 8081'
                        bat 'echo WireMock levantado'
                    }
                }

                stage('Pruebas unitarias') {
                    agent { label 'unittest-agent' }
                    steps {
                        echo 'Ejecutando pruebas unitarias con pytest'
                        bat 'pytest test/unit --maxfail=1 --disable-warnings -q'
                    }
                }

                stage('Pruebas de servicio') {
                    agent { label 'servicetest-agent' }
                    steps {
                        echo 'Ejecutando pruebas REST'
                        bat 'pytest test/rest --maxfail=1 --disable-warnings -q'
                    }
                }
            }
        }

        stage('Fin') {
            agent { label 'master' }
            steps {
                echo 'Reto 2 finalizado correctamente.'
            }
        }
    }
}

